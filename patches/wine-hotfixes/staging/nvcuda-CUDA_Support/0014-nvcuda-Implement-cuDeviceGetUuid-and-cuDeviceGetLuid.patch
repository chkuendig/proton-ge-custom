From af088c1d1c1a5757466f620d981b766184b973b7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sveinar=20S=C3=B8pler?= <cybermax@dexter.no>
Date: Tue, 11 Jan 2022 17:25:06 +0100
Subject: [PATCH 1/2] nvcuda: Implement cuDeviceGetUuid and cuDeviceGetLuid

This partially resolves #52342

DAZ Studio4 will fail to initialize cuda if no valid UUID and LUID
is obtained. Linux nvCUDA does not provide a LUID, so this will be
a "fake" LUID for now.
---
 dlls/nvcuda/nvcuda.c    | 33 +++++++++++++++++++++++++++++++++
 dlls/nvcuda/nvcuda.spec |  4 ++--
 2 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/dlls/nvcuda/nvcuda.c b/dlls/nvcuda/nvcuda.c
index 5b6bf53a1de..dde0bfa8469 100644
--- a/dlls/nvcuda/nvcuda.c
+++ b/dlls/nvcuda/nvcuda.c
@@ -408,6 +408,9 @@ static CUresult (*pcuStreamQuery_ptsz)(CUstream hStream);
 static CUresult (*pcuStreamSynchronize_ptsz)(CUstream hStream);
 static CUresult (*pcuStreamWaitEvent_ptsz)(CUstream hStream, CUevent hEvent, unsigned int Flags);
 
+/* Cuda 10.0 */
+static CUresult (*pcuDeviceGetUuid)(CUuuid *uuid, CUdevice dev);
+static CUresult (*pcuDeviceGetLuid)(char *luid, unsigned int *deviceNodeMask, CUdevice dev);
 
 static void *cuda_handle = NULL;
 
@@ -758,6 +761,10 @@ static BOOL load_functions(void)
     TRY_LOAD_FUNCPTR(cuStreamSynchronize_ptsz);
     TRY_LOAD_FUNCPTR(cuStreamWaitEvent_ptsz);
 
+    /* CUDA 10 */
+    TRY_LOAD_FUNCPTR(cuDeviceGetUuid);
+    TRY_LOAD_FUNCPTR(cuDeviceGetLuid);
+
     #undef LOAD_FUNCPTR
     #undef TRY_LOAD_FUNCPTR
 
@@ -2904,6 +2911,32 @@ CUresult WINAPI wine_cuStreamWaitEvent_ptsz(CUstream hStream, CUevent hEvent, un
     return pcuStreamWaitEvent_ptsz(hStream, hEvent, Flags);
 }
 
+/*
+ * Additions in CUDA 10.0
+ */
+
+CUresult WINAPI wine_cuDeviceGetUuid(CUuuid *uuid, CUdevice dev)
+{
+    TRACE("(%p, %d)\n", uuid, dev);
+    CHECK_FUNCPTR(cuDeviceGetUuid);
+    return pcuDeviceGetUuid(uuid, dev);
+}
+
+CUresult WINAPI wine_cuDeviceGetLuid(char *luid, unsigned int *deviceNodeMask, CUdevice dev)
+{
+    int wine_luid[] = { 0x0000000e, 0x00000000 };
+
+    TRACE("(%p, %p, %d)\n", luid, deviceNodeMask, dev);
+    CHECK_FUNCPTR(cuDeviceGetLuid);
+    /* Linux native libcuda does not provide a LUID, so we need to fake something and return a success */
+
+    memcpy(luid, &wine_luid, sizeof(wine_luid));
+    FIXME("Fix this LUID: (0x%08x)\n", *luid);
+    *deviceNodeMask = 1;
+
+    return CUDA_SUCCESS;
+}
+
 #undef CHECK_FUNCPTR
 
 /*
diff --git a/dlls/nvcuda/nvcuda.spec b/dlls/nvcuda/nvcuda.spec
index 891920b8699..85abf5d2e63 100644
--- a/dlls/nvcuda/nvcuda.spec
+++ b/dlls/nvcuda/nvcuda.spec
@@ -93,12 +93,12 @@
 @ stdcall cuDeviceGetAttribute(ptr long long) wine_cuDeviceGetAttribute
 @ stdcall cuDeviceGetByPCIBusId(ptr str) wine_cuDeviceGetByPCIBusId
 @ stdcall cuDeviceGetCount(ptr) wine_cuDeviceGetCount
-@ stub cuDeviceGetLuid
+@ stdcall cuDeviceGetLuid(ptr ptr long) wine_cuDeviceGetLuid
 @ stdcall cuDeviceGetName(ptr long long) wine_cuDeviceGetName
 @ stub cuDeviceGetP2PAttribute
 @ stdcall cuDeviceGetPCIBusId(ptr long long) wine_cuDeviceGetPCIBusId
 @ stdcall cuDeviceGetProperties(ptr long) wine_cuDeviceGetProperties
-@ stub cuDeviceGetUuid
+@ stdcall cuDeviceGetUuid(ptr long) wine_cuDeviceGetUuid
 @ stdcall cuDevicePrimaryCtxGetState(long ptr ptr) wine_cuDevicePrimaryCtxGetState
 @ stdcall cuDevicePrimaryCtxRelease(long) wine_cuDevicePrimaryCtxRelease
 @ stdcall cuDevicePrimaryCtxReset(long) wine_cuDevicePrimaryCtxReset
-- 
2.34.1

